{"mappings":"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","sources":["src/js/header.js","src/js/popular-films.js","src/js/spiner.js","src/js/pagination.js"],"sourcesContent":["(() => {\n  const refs = {\n    openModalBtn: document.querySelector(\"[data-modal-open]\"),\n    closeModalBtn: document.querySelector(\"[data-modal-close]\"),\n    modal: document.querySelector(\"[data-modal]\"),\n  };\n\n  refs.openModalBtn.addEventListener(\"click\", toggleModal);\n  refs.closeModalBtn.addEventListener(\"click\", toggleModal);\n\n  function toggleModal() {\n    refs.modal.classList.toggle(\"is-hidden\");\n  }\n})();","const cardList = document.querySelector('.card');\nconst URL =\n  'https://api.themoviedb.org/3/trending/movie/day?api_key=177f83f5259c7f846e561f4715bd03a4';\n\nconst URLgenre =\n  'https://api.themoviedb.org/3/genre/movie/list?api_key=177f83f5259c7f846e561f4715bd03a4&language=en-US';\n\nlet genreIdArr;\n\nfunction fetchGenres() {\n  return fetch(URLgenre).then(responce => {\n    if (!responce.ok) {\n      throw new Error(responce.statusText);\n    }\n    return responce.json();\n  });\n}\n\nfunction getGenre(genre_ids) {\n  let genreName = [];\n  genre_ids.forEach(genre_id => {\n    genreName.push(genreIdArr.find(genre => genre.id === genre_id).name);\n  });\n  return genreName;\n}\n\nfetchGenres()\n  .then(genreId => {\n    genreIdArr = genreId.genres;\n    return genreIdArr;\n    //console.log(genreIdArr)\n  })\n  .catch(error => console.log(error));\n\nfunction fetchPopular() {\n  return fetch(URL).then(responce => {\n    if (!responce.ok) {\n      throw new Error(responce.statusText);\n    }\n    return responce.json();\n  });\n}\n\nexport default function renderList(films) {\n  films.results.map(film => {\n    let year = new Date(film.release_date);\n    let yearRelease = year.getFullYear();\n    let genre_ids = film.genre_ids;\n\n    let genres = getGenre(genre_ids);\n\n    return (cardList.innerHTML += `<li class=\"card__item item\">\n\n                  <a class=\"card__link link\" href=\"#\" id=\"${film.id}\" data-id=\"${film.id}\" data-film-open>\n                    <div class=\"card__thumb\">\n                      <img class=\"card__img\"                      \n                        sizes=\"(min-width: 1200px) 370px, (min-width: 768px) 354px, (max-width: 767px) 450px, 100vw\"\n                        src='https://www.themoviedb.org/t/p/w500/${film.poster_path}'\n                        alt=\"tehnocryak\"\n                        width=\"100%\"\n                        class=\"card__img\"\n                      />\n                    </div>\n                    <div class=\"card__meta\">\n                      <h2 class=\"card__title\">${film.original_title}</h2>\n                      <p class=\"card__info\">${genres} | ${yearRelease}</p>\n                    </div>\n                  </a>\n                </li>`);\n  });\n}\n\n// function markupPopular() {\n//   fetchPopular()\n//     .then((films) => renderList(films))\n//     .catch((error) => console.log(error));\n// }\n\n// markupPopular();\n","window.onload = function () {\n  document.body.classList.add('loaded_hiding');\n  window.setTimeout(function () {\n    document.body.classList.add('loaded');\n    document.body.classList.remove('loaded_hiding');\n  }, 500);\n};\n","import renderList from './popular-films';\nimport Notiflix from 'notiflix';\nimport { refs } from './refs';\nimport { API_KEY } from './api-service';\nimport { BASE_URL } from './api-service';\n\nconst inputElement = document.querySelector('input');\nconst btnElement = document.querySelector('button');\n\nclass ApiServise {\n  constructor() {\n    this.page = 1;\n    this.searchQuery = '';\n  }\n\n  fetchPopularMovies() {\n    const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${this.page}`;\n    return fetch(url).then(response => response.json());\n  }\n  fetchMoviesByRequest() {\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${this.searchQuery}&page=${this.page}&include_adult=false`;\n    return fetch(url).then(response => response.json());\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  clearInput() {\n    this.searchQuery.innerHTML = '';\n  }\n\n  pagination(el) {\n    this.page = el;\n  }\n}\n\nconst apiServise = new ApiServise();\n\nlet currentPage = 1;\nlet totalPages;\nconst pageRange = 2;\n\nbtnElement.addEventListener('click', onSearchForm);\n\nfunction onSearchForm(e) {\n  e.preventDefault();\n  apiServise.query = inputElement.value.trim();\n\n  if (apiServise.query.trim() === '') {\n    Notiflix.Notify.failure('Please enter the text in search field');\n    return;\n  }\n\n  clearGallery();\n  inputElement.value = '';\n  refs.pageList.innerHTML = '';\n  apiServise.resetPage();\n  currentPage = 1;\n  searchFetch();\n}\n\nfunction clearGallery() {\n  refs.gallery.innerHTML = '';\n}\n\nfunction searchFetch() {\n  apiServise\n    .fetchMoviesByRequest()\n    .then(data => {\n      console.log(data);\n      if (data.total_results == 0) {\n        Notiflix.Notify.failure(\n          '\"Sorry, there are no film with this name. Please try again.\"'\n        );\n        apiServise.query = '';\n        fetchGall();\n      }\n      totalPages = data.total_pages;\n      refs.lastBtn.textContent = totalPages;\n      // console.log(data)\n      renderList(data);\n      init();\n    })\n    .catch(error => console.log(error));\n}\n\nfunction fetchGall() {\n  apiServise\n    .fetchPopularMovies()\n    .then(data => {\n      totalPages = data.total_pages;\n      refs.lastBtn.textContent = totalPages;\n\n      init();\n      renderList(data);\n    })\n    .catch(error => console.log(error));\n}\n\nrefs.paginationList.addEventListener('click', onBtnClick);\nrefs.prevBtn.addEventListener('click', onPrevBtnClick);\nrefs.nextBtn.addEventListener('click', onNextBtnClick);\n\nfunction onBtnClick(evt) {\n  evt.preventDefault();\n\n  if (evt.target.nodeName !== 'BUTTON') {\n    return;\n  }\n\n  refs.gallery.innerHTML = '';\n  refs.pageList.innerHTML = '';\n\n  currentPage = Number(evt.target.textContent);\n  apiServise.pagination(currentPage);\n\n  if (apiServise.query) {\n    searchFetch();\n  } else {\n    fetchGall();\n  }\n}\n\nfunction onPrevBtnClick(evt) {\n  evt.preventDefault();\n\n  if (currentPage > 1) {\n    currentPage -= 1;\n  }\n  refs.gallery.innerHTML = '';\n  refs.pageList.innerHTML = '';\n  apiServise.pagination(currentPage);\n\n  if (apiServise.query) {\n    searchFetch();\n  } else {\n    fetchGall();\n  }\n}\n\nfunction onNextBtnClick(evt) {\n  evt.preventDefault();\n\n  if (currentPage !== totalPages) {\n    currentPage += 1;\n  }\n  refs.gallery.innerHTML = '';\n  refs.pageList.innerHTML = '';\n  apiServise.pagination(currentPage);\n\n  if (apiServise.query) {\n    searchFetch();\n  } else {\n    fetchGall();\n  }\n}\n\nfunction renderPagesList() {\n  const start = currentPage - pageRange;\n  const end = currentPage + pageRange;\n\n  for (let i = start; i <= end; i += 1) {\n    if (i > 0 && i <= totalPages) {\n      refs.pageList.insertAdjacentHTML(\n        'beforeend',\n        `<li class=\"pages-item\"><button type=\"button\" class=\"pagination-btn\">${i}</button></li>`\n      );\n    }\n  }\n}\n\nfunction hideFirstLastBtn() {\n  currentPage < 4\n    ? (refs.firstPage.hidden = true)\n    : (refs.firstPage.hidden = false);\n  currentPage > totalPages - 3\n    ? (refs.lastPage.hidden = true)\n    : (refs.lastPage.hidden = false);\n}\n\nfunction checkBtnOpacity() {\n  currentPage === 1\n    ? (refs.prevBtn.disabled = true)\n    : (refs.prevBtn.disabled = false);\n  currentPage === totalPages\n    ? (refs.nextBtn.disabled = true)\n    : (refs.nextBtn.disabled = false);\n}\n\nfunction makeActiveBtn() {\n  let pagesMenu = refs.pageList.querySelectorAll('button');\n  for (let i = 0; i < pagesMenu.length; i += 1) {\n    if (Number(pagesMenu[i].textContent) === currentPage) {\n      pagesMenu[i].classList.add('active-btn');\n    }\n  }\n}\n\nfunction init() {\n  checkBtnOpacity();\n  hideFirstLastBtn();\n  renderPagesList();\n  makeActiveBtn();\n}\n\napiServise.pagination(currentPage);\nfetchGall();\n"],"names":["refs","openModalBtn","document","querySelector","closeModalBtn","modal","toggleModal","classList","toggle","addEventListener","$ed081d1e17bb4577$var$cardList","$ed081d1e17bb4577$var$genreIdArr","$ed081d1e17bb4577$export$2e2bcd8739ae039","films","results","map","film","yearRelease","Date","release_date","getFullYear","genres","genre_ids","genreName","forEach","genre_id","push","find","genre","id","name","$ed081d1e17bb4577$var$getGenre","innerHTML","poster_path","original_title","fetch","then","responce","ok","Error","statusText","json","genreId","catch","error","console","log","window","onload","body","add","setTimeout","remove","$1bab9c519cfa82bc$var$inputElement","$1bab9c519cfa82bc$var$btnElement","$1bab9c519cfa82bc$var$apiServise","fetchPopularMovies","url","$7me8F","BASE_URL","API_KEY","this","page","response","fetchMoviesByRequest","searchQuery","incrementPage","resetPage","query","newQuery","clearInput","pagination","el","constructor","$1bab9c519cfa82bc$var$totalPages","$1bab9c519cfa82bc$var$currentPage","$1bab9c519cfa82bc$var$searchFetch","data","total_results","$parcel$interopDefault","$eWCmQ","Notify","failure","$1bab9c519cfa82bc$var$fetchGall","total_pages","$krGWQ","lastBtn","textContent","$1bab9c519cfa82bc$var$init","prevBtn","disabled","nextBtn","firstPage","hidden","lastPage","end","i","pageList","insertAdjacentHTML","$1bab9c519cfa82bc$var$renderPagesList","pagesMenu","querySelectorAll","length","Number","$1bab9c519cfa82bc$var$makeActiveBtn","e","preventDefault","value","trim","gallery","paginationList","evt","target","nodeName"],"version":3,"file":"index.99519beb.js.map"}