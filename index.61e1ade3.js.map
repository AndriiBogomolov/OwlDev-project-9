{"mappings":"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","sources":["src/js/footer-modal.js","src/js/refs.js","src/js/api-service.js","src/js/modal_film.js","src/js/popular-films.js","src/js/spiner.js"],"sourcesContent":["const refs = {\n  openFooterModal: document.querySelector('[data-action=\"open-lightbox\"]'),\n  closeFooterModal: document.querySelector('[data-action=\"close-lightbox\"]'),\n  lightboxFooterModal: document.querySelector('.js-lightbox'),\n};\n\n//------------------відкриття модалки--------------------------\nrefs.openFooterModal.addEventListener('click', onOpenModal);\n\nfunction onOpenModal() {\n  refs.lightboxFooterModal.classList.remove('visually-hidden');\n}\n//-----------------закриття модалки через кнопку----------------\nrefs.closeFooterModal.addEventListener('click', onCloseModal);\n\nfunction onCloseModal() {\n  refs.lightboxFooterModal.classList.add('visually-hidden');\n}\n","export const refs = {\n\tfilm: document.querySelector(\"#id\"),\n\tmodalOpen: document.querySelector(\"[data-film-open]\"),\n\tmodalClose: document.querySelector(\"[data-film-close]\"),\n\tmodal: document.querySelector(\"[data-film]\"),\n\tmodalFilmImg: document.querySelector(\".modal__img\"),\n\tmodalFilmTitle: document.querySelector(\".modal__title\"),\n\tmodalFilmVote: document.querySelector(\".vote\"),\n\tmodalFilmVotes: document.querySelector(\".votes\"),\n\tmodalFilmPopularity: document.querySelector(\".popularity\"),\n\tmodalFilmOrigTitle: document.querySelector(\".orig-title\"),\n\tmodalFilmGenre: document.querySelector(\".genre\"),\n\tmodalFilmDescription: document.querySelector(\".about__text\"),\n};  ","//const API_KEY = '177f83f5259c7f846e561f4715bd03a4';\n//const BASE_URL = 'https://api.themoviedb.org/3';\n\n//export { API_KEY, BASE_URL };\n\n// import axios from 'axios';\n\n// const API_KEY = 'e52c7d8699df589ec79fa44e6b7f6a0c';\n// const BASE_URL = 'https://api.themoviedb.org';\n\n// export default class FilmotekaApiService {\n//     constructor() {\n//         this.searchQuery = '';\n//         this.page = 1;\n//     }\n\n//     fetch() {\n//         const url = `${BASE_URL}3/search/movie?api_key=${API_KEY}&query=Jack + Reacher`;\n//         return url\n//             .get(url)\n//             .then(function (response) {\n//                 console.log(response.json)\n//                 return response.json();\n//             })\n//             .then(({ object }) => {\n//                 this.incrementPage();\n//                 return { object };\n//             })\n//             .catch(error => console.log(error));\n\n//     }\n\n//     incrementPage() {\n//         this.page += 1;\n//     }\n\n//     resetPage() {\n//         this.page = 1;\n//     }\n\n//     get query() {\n//         return this.searchQuery;\n//     }\n\n//     set query(newQuery) {\n//         this.searchQuery = newQuery;\n//     }\n\n// }\n\nconst API_KEY = '177f83f5259c7f846e561f4715bd03a4';\nconst BASE_URL = 'https://api.themoviedb.org/';\n\nexport { API_KEY, BASE_URL };\n\nexport default class ApiServise {\n  constructor() {\n    this.page = 1;\n    this.searchQuery = '';\n  }\n  fetchMoviesByRequest() {\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${this.searchQuery}&page=${this.page}&include_adult=false`;\n    return fetch(url).then(response => response.json());\n    // console\n    //   .log(fetchMoviesByRequest())\n\n    //   .then(({ results }) => {\n    //     this.incrementPage();\n\n    //     return results;\n    //   });\n  }\n  incrementPage() {\n    this.page += 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  clearInput() {\n    this.searchQuery.innerHTML = '';\n  }\n}\n\nlet currentPage = 1;\nlet totalPages;\nconst pageRange = 2;\n\ninit();\nrefs.searchForm.addEventListener('submit', onSearchForm);\n","// import { Notify } from 'notiflix';\nimport { refs } from './refs';\nimport { BASE_URL } from './api-service';\nimport { API_KEY } from './api-service';\n\n(() => {\n  refs.modalOpen.forEach(link => {\n    link.addEventListener('click', toggleModal);\n  });\n  refs.modalClose.addEventListener('click', toggleModal);\n\n  function toggleModal() {\n    document.body.classList.toggle('film-open');\n    refs.modal.classList.toggle('is-hidden');\n  }\n})();\n\nrefs.modalOpen.addEventListener('click', onModalOpen);\n\nfunction onModalOpen(evt) {\n  const data = requestFullInfo().then(data => fillingMurkup(data));\n}\n\nfunction requestFullInfo() {\n  const filmId = refs.film.getAttribute(id);\n  return fetch(`${BASE_URL}/${filmId}?api_key=${API_KEY}`)\n    .then(resp => {\n      if (!resp.ok) {\n        throw new Error();\n      }\n      return resp.json();\n    })\n    .catch(er =>\n      Notify.failure('Sorry, something goes wrong. Please, try again')\n    );\n}\n\nfunction fillingMurkup(obj) {\n  const genres = obj.genres.map(genre => genre.name).join(', ');\n\n  refs.modalFilmImg.src = `https://image.tmdb.org/t/p/w500/${obj.poster_path}`;\n  refs.modalFilmImg.alt = `${obj.title} poster`;\n  refs.modalFilmTitle.textContent = obj.title;\n  refs.modalFilmVote.textContent = obj.vote_average;\n  refs.modalFilmVotes.textContent = obj.vote_count;\n  refs.modalFilmPopularity.textContent = obj.popularity;\n  refs.modalFilmOrigTitle.textContent = obj.original_title;\n  refs.modalFilmDescription.textContent = obj.overview;\n  refs.modalFilmGenre.textContent = genres;\n}\n","const cardList = document.querySelector('.card');\nconst URL =\n  'https://api.themoviedb.org/3/trending/movie/day?api_key=177f83f5259c7f846e561f4715bd03a4';\n\nconst URLgenre =\n  'https://api.themoviedb.org/3/genre/movie/list?api_key=177f83f5259c7f846e561f4715bd03a4&language=en-US';\n\nfunction fetchGenres() {\n  return fetch(URLgenre).then(responce => {\n    if (!responce.ok) {\n      throw new Error(responce.statusText);\n    }\n    return responce.json();\n  });\n}\n\nfunction getGenre(genre_ids) {\n  let genreName = [];\n  genre_ids.forEach(genre_id => {\n    genreName.push(genreIdArr.find(genre => genre.id === genre_id).name);\n  });\n  return genreName;\n}\n\nfetchGenres()\n  .then(genreId => {\n    genreIdArr = genreId.genres;\n    //console.log(genreIdArr)\n  })\n  .catch(error => console.log(error));\n\nfunction fetchPopular() {\n  return fetch(URL).then(responce => {\n    if (!responce.ok) {\n      throw new Error(responce.statusText);\n    }\n    return responce.json();\n  });\n}\n\nfunction renderList(films) {\n  films.results.map(film => {\n    let year = new Date(film.release_date);\n    let yearRelease = year.getFullYear();\n    genre_ids = film.genre_ids;\n\n    let genres = getGenre(genre_ids);\n    return (cardList.innerHTML += `<li class=\"card__item item\">\n                  <a class=\"card__link link\" href=\"#\" data-modal-open>\n                  <div class=\"card__thumb\">\n                  <img class=\"card__img\"\n                    sizes=\"(min-width: 1280px) 370px, (min-width: 768px) 354px, (max-width: 767px) 450px, 100vw\"\n                    src='https://www.themoviedb.org/t/p/w500/${film.poster_path}'\n                    alt=\"tehnocryak\"\n                    width=\"100%\"\n                  />\n                </div>\n                <div class=\"card__meta\">\n                  <h2 class=\"card__title\">${film.original_title}</h2>\n                  <p class=\"card__info\">${genres} | ${yearRelease}</p>\n                </div>\n              </a>\n            </li>`);\n  });\n}\n\nfunction markupPopular() {\n  fetchPopular()\n    .then(films => renderList(films))\n    .catch(error => console.log(error));\n}\n\nmarkupPopular();\n","\n  window.onload = function () {\n    document.body.classList.add('loaded_hiding');\n    window.setTimeout(function () {\n      document.body.classList.add('loaded');\n      document.body.classList.remove('loaded_hiding');\n    }, 500);\n  }\n"],"names":["$4e12c0f0297ad96a$var$refs","openFooterModal","document","querySelector","closeFooterModal","lightboxFooterModal","addEventListener","classList","remove","add","$ee27a4d7c64fc8c4$export$21666b427502ea6d","film","modalOpen","modalClose","modal","modalFilmImg","modalFilmTitle","modalFilmVote","modalFilmVotes","modalFilmPopularity","modalFilmOrigTitle","modalFilmGenre","modalFilmDescription","init","refs","searchForm","onSearchForm","toggleModal","body","toggle","forEach","link","evt","filmId","getAttribute","id","fetch","then","resp","ok","Error","json","catch","er","Notify","failure","$08d119c81b5e7d0e$var$requestFullInfo","data","obj","genres","map","genre","name","join","src","poster_path","alt","title","textContent","vote_average","vote_count","popularity","original_title","overview","$08d119c81b5e7d0e$var$fillingMurkup","$ed081d1e17bb4577$var$cardList","$ed081d1e17bb4577$var$renderList","films","results","yearRelease","Date","release_date","getFullYear","genre_ids","genreName","genre_id","push","genreIdArr","find","$ed081d1e17bb4577$var$getGenre","innerHTML","responce","statusText","genreId","error","console","log","window","onload","setTimeout"],"version":3,"file":"index.61e1ade3.js.map"}